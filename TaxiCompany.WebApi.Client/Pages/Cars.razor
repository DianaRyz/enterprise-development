@page "/"
@inject HttpClient Http
@using Blazorise
@using Blazorise.Icons
@using static Blazorise.Modal

<h3>Cars</h3>

@if (cars == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Model</th>
                <th>Colour</th>
                <th>State Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.CarId</td>
                    <td>@car.Model</td>
                    <td>@car.Colour</td>
                    <td>@car.StateNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditCar(car.CarId)">
                            <Icon Name="IconName.Edit" />
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteCar(car.CarId)">
                            <Icon Name="IconName.Delete" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Button Color="Color.Success" @onclick="ShowAddCarModal">Add New Car</Button>
}

<!-- Modal for Adding New Car -->
<Modal @bind-Visible="isAddCarModalVisible">
    <ModalHeader>
        <h5 class="modal-title">Add New Car</h5>
    </ModalHeader>
    <ModalBody>
        <EditForm Model="@newCar" OnSubmit="HandleAddCarSubmit">
            <div class="mb-3">
                <label for="model" class="form-label">Model</label>
                <InputText id="model" class="form-control" @bind-Value="newCar.Model" />
            </div>

            <div class="mb-3">
                <label for="colour" class="form-label">Colour</label>
                <InputText id="colour" class="form-control" @bind-Value="newCar.Colour" />
            </div>

            <div class="mb-3">
                <label for="stateNumber" class="form-label">State Number</label>
                <InputText id="stateNumber" class="form-control" @bind-Value="newCar.StateNumber" />
            </div>

            <Button Color="Color.Success">Save</Button>
            <Button Color="Color.Secondary" @onclick="CancelAddCar">Cancel</Button>
        </EditForm>
    </ModalBody>
</Modal>

<!-- Modal for Editing Car -->
<Modal @bind-Visible="isEditCarModalVisible">
    <ModalHeader>
        <h5 class="modal-title">Edit Car</h5>
    </ModalHeader>
    <ModalBody>
        <EditForm Model="@editCar" OnSubmit="HandleEditCarSubmit">
            <div class="mb-3">
                <label for="model" class="form-label">Model</label>
                <InputText id="model" class="form-control" @bind-Value="editCar.Model" />
            </div>

            <div class="mb-3">
                <label for="colour" class="form-label">Colour</label>
                <InputText id="colour" class="form-control" @bind-Value="editCar.Colour" />
            </div>

            <div class="mb-3">
                <label for="stateNumber" class="form-label">State Number</label>
                <InputText id="stateNumber" class="form-control" @bind-Value="editCar.StateNumber" />
            </div>

            <Button Color="Color.Success">Save</Button>
            <Button Color="Color.Secondary" @onclick="CancelEditCar">Cancel</Button>
        </EditForm>
    </ModalBody>
</Modal>

@code {
    private ICollection<CarDtoGet>? cars;  // Список машин, которые получаем с сервера
    private CarDtoPost newCar = new CarDtoPost();  // DTO для добавления новой машины
    private CarDtoPost editCar = new CarDtoPost();  // DTO для редактирования машины
    private bool isAddCarModalVisible = false;
    private bool isEditCarModalVisible = false;
    private string carUrl = "api/cars";  // URL для запросов

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            // Используем HttpClient для получения списка машин
            cars = await Http.GetFromJsonAsync<List<CarDtoGet>>(carUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cars: {ex.Message}");
        }
    }

    private void ShowAddCarModal()
    {
        newCar = new CarDtoPost();  // Сбрасываем модель для новой машины
        isAddCarModalVisible = true;  // Открываем модальное окно для добавления
    }

    private void EditCar(int carId)
    {
        // Переносим только данные для редактирования (не включая ID)
        editCar = new CarDtoPost
            {
                Model = cars.FirstOrDefault(c => c.CarId == carId)?.Model,
                Colour = cars.FirstOrDefault(c => c.CarId == carId)?.Colour,
                StateNumber = cars.FirstOrDefault(c => c.CarId == carId)?.StateNumber
            };

        isEditCarModalVisible = true;  // Открываем модальное окно для редактирования
    }

    private async Task HandleAddCarSubmit()
    {
        try
        {
            // Используем HttpClient для отправки данных на сервер
            var response = await Http.PostAsJsonAsync(carUrl, newCar);
            if (response.IsSuccessStatusCode)
            {
                await LoadCars();  // Обновляем список машин
                isAddCarModalVisible = false;  // Закрываем окно добавления
            }
            else
            {
                Console.WriteLine($"Error adding car: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving car: {ex.Message}");
        }
    }

    private async Task HandleEditCarSubmit()
    {
        try
        {
            // Получаем ID машины и отправляем запрос на обновление
            int carId = cars.FirstOrDefault(c => c.Model == editCar.Model)?.CarId ?? 0;

            if (carId != 0)
            {
                // Используем HttpClient для отправки обновленных данных на сервер
                var response = await Http.PutAsJsonAsync($"{carUrl}/{carId}", editCar);
                if (response.IsSuccessStatusCode)
                {
                    await LoadCars();  // Обновляем список машин
                    isEditCarModalVisible = false;  // Закрываем окно редактирования
                }
                else
                {
                    Console.WriteLine($"Error updating car: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating car: {ex.Message}");
        }
    }

    private void CancelAddCar()
    {
        isAddCarModalVisible = false;  // Закрываем модальное окно добавления без изменений
    }

    private void CancelEditCar()
    {
        isEditCarModalVisible = false;  // Закрываем модальное окно редактирования без изменений
    }

    private async Task DeleteCar(int carId)
    {
        try
        {
            // Используем HttpClient для отправки запроса на удаление машины
            var response = await Http.DeleteAsync($"{carUrl}/{carId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadCars();  // Обновляем список машин
            }
            else
            {
                Console.WriteLine($"Error deleting car: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting car: {ex.Message}");
        }
    }
}
